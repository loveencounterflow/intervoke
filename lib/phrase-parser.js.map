{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/phrase-parser.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ debug\n  info\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERVOKE/PROMPT-PARSER'\n{ rpr }                   = GUY.trm\n{ get_base_types }        = require './types'\n\n\n\nvocabulary  =\n  of:       { role: 'of',         }\n  or:       { role: 'or',         }\n  optional: { role: 'optional',   }\n  #.......................................................................................................\n  empty:    { role: 'adjective',  }\n  nonempty: { role: 'adjective',  }\n  positive: { role: 'adjective',  }\n  negative: { role: 'adjective',  }\n  #.......................................................................................................\n  text:     { role: 'noun', adjectives: [ 'empty', 'nonempty',      ], }\n  list:     { role: 'noun', adjectives: [ 'empty', 'nonempty',      ], }\n  integer:  { role: 'noun', adjectives: [ 'positive', 'negative',   ], }\n\n\n#===========================================================================================================\n@Phrase_parser = class Phrase_parser\n\n  #---------------------------------------------------------------------------------------------------------\n  _$walk_alternative_phrases: ( sentence ) ->\n    ### assuming no empty strings ###\n    phrase    = []\n    for word in sentence\n      if word is 'or'\n        yield phrase\n        phrase = []\n        continue\n      phrase.push word\n    yield phrase\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_alternative_phrases: ( words ) ->\n    for phrase from @_$walk_alternative_phrases words\n      sentence = words.join ' '\n      throw new Error \"empty alternative clause in sentence #{rpr sentence}\" if phrase.length is 0\n      yield phrase\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_vocabulary_entry: ( phrase, word, role = null ) ->\n    unless ( R = vocabulary[ word ] )?\n      phrase_txt = phrase.join '_'\n      throw new Error \"word #{rpr word} in phrase #{rpr phrase_txt} is unknown\"\n    if role? and R.role isnt role\n      phrase_txt = phrase.join '_'\n      throw new Error \"expected word #{rpr word} in phrase #{rpr phrase_txt} to have role #{rpr role} but is declared to be #{rpr R.role}\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_adjectives: ( ast, phrase ) ->\n    R = []\n    for adjective, idx in phrase\n      break if idx >= phrase.length - 1\n      if adjective is 'optional'\n        unless idx is 0\n          phrase_txt = phrase.join '_'\n          throw new Error \"expected 'optional' to occur as first word in phrase, got #{rpr phrase_txt}\"\n        ast.optional = true\n        continue\n      @_get_vocabulary_entry phrase, adjective, 'adjective'\n      R.push adjective\n      return R\n\n  #---------------------------------------------------------------------------------------------------------\n  parse: ( sentence ) ->\n    words           = sentence.split '_'\n    element_clauses = @_find_element_clauses words\n    # debug '^99-1^', element_clauses\n    alternatives    = []\n    R               = { alternatives, optional: false, }\n    for phrase from @_walk_alternative_phrases words\n      #.....................................................................................................\n      noun          = phrase.at -1\n      noun_entry    = @_get_vocabulary_entry phrase, noun, 'noun'\n      #.....................................................................................................\n      ### NOTE not entirely correct, must look for 'of' ###\n      adjectives    = @_get_adjectives R, phrase\n      alternative   = { noun, adjectives, }\n      alternatives.push alternative\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _find_all: ( list, value ) ->\n    ### TAINT comments to https://stackoverflow.com/a/20798567/7568091 suggest for-loop may be faster ###\n    R   = []\n    idx = -1\n    R.push idx while ( idx = list.indexOf value, idx + 1 ) > -1\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _find_element_clauses: ( words ) ->\n    R = { phrase: [], }\n    for word, idx in words\n      if word is 'of'\n        R.elements = @_find_element_clauses words[ idx + 1 .. ]\n        return R\n      R.phrase.push word\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_element_clauses: ( words ) ->\n    clause = @_find_element_clauses words\n    yield from @_$walk_element_clauses clause\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _$walk_element_clauses: ( clause ) ->\n    yield clause\n    yield from @_$walk_element_clauses clause.elements if clause.elements?\n    return null\n\n\n\n"
  ]
}