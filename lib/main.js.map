{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n#===========================================================================================================\nGUY                       = require 'guy'\n{ debug\n  info\n  warn\n  urge\n  help }                  = GUY.trm.get_loggers 'INTERVOKE'\n{ rpr }                   = GUY.trm\n{ get_base_types }        = require './types'\nE                         = require './errors'\n{ Phrase_parser }         = require './phrase-parser'\n\n\n#===========================================================================================================\n@Intervoke_proxy = class Intervoke_proxy\n\n  #---------------------------------------------------------------------------------------------------------\n  clasz = @\n\n  #---------------------------------------------------------------------------------------------------------\n  @create_proxy: ( x ) -> new Proxy x,\n    get: ( target, accessor, receiver ) =>\n      ### Return handler for given `accessor`. If instance doesn't have property `accessor` and instance has\n      `__get_handler()`, call that method with `accessor`, set property `accessor` and return handler. In\n      case instance has `__parser`, get `ast` as` `__parser.parse accessor` and call `__get_handler()` with\n      `ast` as second argument. `__get_handler()` will only be called if `accessor` is a string that does\n      not start with an underscore. ###\n      return target[ accessor ] if Reflect.has target, accessor\n      return target[ accessor ] if ( typeof accessor ) isnt 'string'\n      return target[ accessor ] if accessor.startsWith '_'\n      if Reflect.has target, '__get_handler'\n        ast = if ( Reflect.has target, '__parser' ) then target.__parser.parse accessor else null\n        if ( R = target.__get_handler accessor, ast )?\n          R = target.__nameit '###' + accessor, R\n          GUY.props.hide target, accessor, R\n          return R\n      throw new E.Unknown_accessor '^Intervoke_proxy/proxy.get@1^', accessor\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    return clasz.create_proxy @\n\n  #---------------------------------------------------------------------------------------------------------\n  __nameit: ( name, f ) -> Object.defineProperty f, 'name', { value: name, }; f\n\n\n#===========================================================================================================\n@Intervoke = class Intervoke extends Intervoke_proxy\n\n  #---------------------------------------------------------------------------------------------------------\n  clasz = @\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    GUY.props.hide @, '__types',      get_base_types()\n    GUY.props.hide @, '__cfg',        @__types.create.word_prompter_cfg cfg\n    GUY.props.hide @, '__accessors',  new Set()\n    @__absorb_declarations()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  __walk_prototype_chain: ->\n    R = []\n    for object in ( GUY.props.get_prototype_chain @constructor ).reverse()\n      yield object if @__types.is_extension_of object, clasz\n    yield @\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  __absorb_declarations: ->\n    for object from @__walk_prototype_chain()\n      continue unless Reflect.has object, 'declare'\n      @__declare accessor, handler for accessor, handler of object.declare\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  __declare: ( accessor, handler ) ->\n    ### Associate an accessor with a handler method: ###\n    throw new E.Not_allowed_to_redeclare '^Intervoke::__declare@1^', accessor if Reflect.has @, accessor\n    @__accessors.add accessor\n    @__nameit @constructor.name.toLowerCase() + '_' + accessor, handler\n    GUY.props.hide @, accessor, handler\n    return null\n\n\n#===========================================================================================================\n@Intervoke_phraser = class Intervoke_phraser extends Intervoke\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg = null ) ->\n    super cfg\n    GUY.props.hide @, '__parser', new Phrase_parser()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  __get_handler: ( accessor, ast ) ->\n    ### Given a accessor, returns a method to use for that accessor, either from cache a newly generated by\n    calling `__create_handler()` which must be declared in derived classes. When used with alternative\n    accessors, care has been taken to only call `__create_handler()` once and to cache alternative accessors\n    along with the normalized one. ###\n    # ast = @__parser.parse accessor\n    debug '^Intervoke_phraser::__get_handler@1^', \"accessor:  \", accessor\n    debug '^Intervoke_phraser::__get_handler@1^', \"ast:       \", ast\n    throw new Error \"override Intervoke_phraser::__get_handler() to implement your own Intervoke proxy\"\n\n"
  ]
}