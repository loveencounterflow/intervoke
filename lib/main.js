(function() {
  'use strict';
  var Analyzing_attributor, Attributor, GUY, Guy_error_base_class, Isa, Wrong_use_of_abstract_base_class_method, debug, help, info, rpr, urge, warn;

  //===========================================================================================================
  GUY = require('guy');

  ({debug, info, warn, urge, help} = GUY.trm.get_loggers('INTERTYPE'));

  ({rpr} = GUY.trm);

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT move this to Guy */
  Guy_error_base_class = class Guy_error_base_class extends Error {
    constructor(ref, message) {
      super();
      if (ref === null) {
        this.message = message;
        return void 0;
      }
      this.message = `${ref} (${this.constructor.name}) ${message}`;
      this.ref = ref;
      return void 0/* always return `undefined` from constructor */;
    }

  };

  //-----------------------------------------------------------------------------------------------------------
  Wrong_use_of_abstract_base_class_method = class Wrong_use_of_abstract_base_class_method extends Guy_error_base_class {
    constructor(ref, instance, method_name) {
      var class_name;
      class_name = instance.constructor.name;
      super(ref, `not allowed to call method ${rpr(method_name)} of abstract base class ${rpr(class_name)}`);
    }

  };

  Attributor = (function() {
    var clasz;

    //===========================================================================================================
    class Attributor extends Function {
      //---------------------------------------------------------------------------------------------------------
      static create_proxy(x) {
        return new Proxy(x, {
          get: function(target, accessor, receiver) {
            if ((typeof accessor) === 'symbol') {
              // info '^98-1^', rpr accessor
              return target[accessor];
            }
            if (accessor === 'constructor') {
              return target[accessor];
            }
            if ((accessor.startsWith != null) && accessor.startsWith('__')) {
              return target[accessor];
            }
            return function(...P) {
              return target(accessor, ...P);
            };
          }
        });
      }

      //---------------------------------------------------------------------------------------------------------
      constructor() {
        /* Trick to make this work; these are strings containing JS code: */
        super('...P', 'return this.__me.__do(...P)');
        this.__me = this.bind(this);
        return clasz.create_proxy(this.__me);
      }

      //---------------------------------------------------------------------------------------------------------
      __do(...P) {
        /* Attributor instances are functions, and the `__do()` method is the code that they execute when being
           called. This method should be overridden in derived classes. */
        throw new Wrong_use_of_abstract_base_class_method('^Attributor.__do^', this, '__do');
      }

    };

    //---------------------------------------------------------------------------------------------------------
    clasz = Attributor;

    return Attributor;

  }).call(this);

  Analyzing_attributor = (function() {
    //===========================================================================================================
    class Analyzing_attributor extends Attributor {
      //---------------------------------------------------------------------------------------------------------
      constructor() {
        var clasz;
        super();
        clasz = this.constructor;
        this.__cache = clasz.__cache != null ? new Map(clasz.__cache) : new Map();
        return void 0;
      }

      //---------------------------------------------------------------------------------------------------------
      __do(accessor, ...details) {
        return (this.__get_handler(accessor))(...details);
      }

      //---------------------------------------------------------------------------------------------------------
      __get_handler(accessor) {
        var R, ncc, phrase;
        if (this.__cache.has(accessor)) {
          /* Given a accessor, returns a method to use for that accessor, either from cache a newly generated by
             calling `__create_handler()` which must be declared in derived classes. When used with alternative
             accessors, care has been taken to only call `__create_handler()` once and to cache alternative accessors
             along with the normalized one. */
          return this.__cache.get(accessor);
        }
        [ncc, phrase] = this.__get_ncc_and_phrase(accessor);
        //.......................................................................................................
        if (this.__cache.has(ncc)) {
          R = this.__cache.get(ncc);
        } else {
          //.......................................................................................................
          R = this.__nameit(ncc, this.__create_handler);
          this.__cache.set(ncc, R);
        }
        //.......................................................................................................
        this.__cache.set(accessor, R);
        return R;
      }

      //---------------------------------------------------------------------------------------------------------
      __create_handler(phrase) {
        /* Given a phrase (the parts of an accessor when split), return a function that takes details as
           arguments and returns a resolution. */
        throw new Wrong_use_of_abstract_base_class_method('^Analyzing_attributor.__create_handler^', this, '__create_handler');
      }

      //---------------------------------------------------------------------------------------------------------
      __get_ncc_and_phrase(accessor) {
        /* Given an accessor (string), return a phrase (list of strings): */
        var ncc, phrase;
        phrase = accessor.split(/[\s_]+/u);
        ncc = phrase.join('_');
        return [ncc, phrase];
      }

      //---------------------------------------------------------------------------------------------------------
      __declare(accessor, handler) {
        /* Associate an accessor with a handler method: */
        /* TAINT check for overwrites */
        this.__cache.set(accessor, handler);
        return null;
      }

      //---------------------------------------------------------------------------------------------------------
      __nameit(name, f) {
        Object.defineProperty(f, 'name', {
          value: name
        });
        return f;
      }

    };

    //---------------------------------------------------------------------------------------------------------
    Analyzing_attributor.__cache = null;

    return Analyzing_attributor;

  }).call(this);

  Isa = (function() {
    //===========================================================================================================
    class Isa extends Analyzing_attributor {
      //---------------------------------------------------------------------------------------------------------
      __create_handler(phrase) {
        return function(details) {
          return 'Yo';
        };
      }

    };

    //---------------------------------------------------------------------------------------------------------
    Isa.__cache = new Map(Object.entries({
      null: function(x) {
        return x === null;
      },
      undefined: function(x) {
        return x === void 0;
      },
      boolean: function(x) {
        return (x === true) || (x === false);
      },
      float: function(x) {
        return Number.isFinite(x);
      },
      symbol: function(x) {
        return (typeof x) === 'symbol';
      }
    }));

    return Isa;

  }).call(this);

  //===========================================================================================================
  if (module === require.main) {
    (() => {
      var e, isa;
      isa = new Isa();
      debug('^98-2^', isa.__cache);
      try {
        debug('^98-3^', (new Attributor()).__do());
      } catch (error) {
        e = error;
        warn(GUY.trm.reverse(e.message));
      }
      // info '^98-4^', isa
      debug('^98-5^', isa('float', 42));
      debug('^98-6^', isa.float(42));
      debug('^98-7^', isa.float(0/0));
      debug('^98-8^', isa.float('22'));
      info('^98-9^', [...isa.__cache.keys()]);
      debug('^98-10^', isa.float_or_text(42));
      info('^98-11^', [...isa.__cache.keys()]);
      debug('^98-12^', isa.float___or_text(42));
      info('^98-13^', [...isa.__cache.keys()]);
      debug('^98-14^', isa('float   or text', 42));
      info('^98-15^', [...isa.__cache.keys()]);
      debug('^98-16^', isa.__cache.get('float_or_text'));
      debug('^98-17^', isa.float_or_text);
      debug('^98-18^', (isa.__cache.get('float___or_text')) === (isa.__cache.get('float_or_text')));
      debug('^98-19^', (isa.__cache.get('float___or_text')) === (isa.__cache.get('float   or text')));
      debug('^98-20^', (isa.__cache.get('float_or_text')).name === 'float_or_text');
      return debug('^98-21^', (isa.__cache.get('float_or_text')) === isa.float_or_text);
    })();
  }

}).call(this);

//# sourceMappingURL=main.js.map