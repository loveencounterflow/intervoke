{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,SAAA,EAAA,GAAA,EAAA,SAAA,EAAA,0BAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,cAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAJ5B;;;;;;;;;;;EAcA,CAAA,CAAE,KAAF,CAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,iBAApB,CAA5B;;EACA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B;;EACA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,OAAR,CAA5B;;EACA,UAAA,GAA4B;;EAC5B,0BAAA,GAA8B;;EAC9B,MAAA,GAA4B,MAAA,CAAO,QAAP,EAvB5B;;;;;EA4BA,cAAA,GAAiB,QAAA,CAAA,CAAA;AACjB,QAAA;IAAE,IAAqB,kBAArB;AAAA,aAAO,WAAP;KAAF;;IAEE,UAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,UAA5B,EAHF;;IAKE,OAAO,CAAC,YAAR,CAAqB,KAArB;IACA,OAAO,CAAC,iBAAR,CACE;MAAA,MAAA,EACE;QAAA,QAAA,EAAc;MAAd,CADF;MAEA,QAAA,EACE;QAAA,QAAA,EAAc;MAAd;IAHF,CADF,EANF;;AAYE,WAAO;EAbQ,EA5BjB;;;EA8CA,MAAM,CAAC,OAAP,GAAiB,CAAE,MAAF,EAAU,cAAV;AA9CjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'DATAMILL/TYPES'\n{ debug }                 = GUY.trm.get_loggers 'INTERVOKE/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\n{ Dataclass }             = require 'datom'\nbase_types                = null\nanalyzing_attributor_types  = null\nmisfit                    = Symbol 'misfit'\n# PATH                      = require 'node:path'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.ivk_registry 'map'\n  declare.word_prompter_cfg\n    fields:\n      registry:     'ivk_registry'\n    template:\n      registry:     null\n  #.........................................................................................................\n  return base_types\n\n\n\n#===========================================================================================================\nmodule.exports = { misfit, get_base_types, }\n\n\n\n"
  ]
}