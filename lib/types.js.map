{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/types.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,UAAA,EAAA,KAAA,EAAA,IAAA,EAAA,cAAA,EAAA,OAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR,EAJ5B;;;;;;;;;;;EAcA,CAAA,CAAE,KAAF,CAAA,GAA4B,GAAG,CAAC,GAAG,CAAC,WAAR,CAAoB,iBAApB,CAA5B;;EACA,CAAA,CAAE,GAAF,EACE,OADF,EAEE,IAFF,EAGE,GAHF,CAAA,GAG4B,GAAG,CAAC,GAHhC;;EAIA,CAAA,CAAE,SAAF,CAAA,GAA4B,OAAA,CAAQ,WAAR,CAA5B;;EACA,UAAA,GAA4B;;EAC5B,MAAA,GAA4B,MAAA,CAAO,QAAP,EArB5B;;;;;EA0BA,cAAA,GAAiB,QAAA,CAAA,CAAA;AACjB,QAAA;IAAE,IAAqB,kBAArB;AAAA,aAAO,WAAP;KAAF;;IAEE,UAAA,GAA4B,IAAI,SAAJ,CAAA;IAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,UAA5B,EAHF;;IAKE,OAAO,CAAC,YAAR,CAAqB,KAArB;IACA,OAAO,CAAC,iBAAR,CACE;MAAA,MAAA,EACE;QAAA,QAAA,EAAc;MAAd,CADF;MAEA,QAAA,EACE;QAAA,QAAA,EAAc;MAAd,CAHF;MAIA,MAAA,EAAQ,QAAA,CAAE,CAAF,CAAA;AACZ,YAAA;QAAM,IAAY,WAAA,IAAO,CAAI,CAAI,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ,CAA3B;AAAA,iBAAO,EAAP;;QACA,CAAA,GAAc,CAAE,GAAA,IAAC,CAAA,QAAQ,CAAC,iBAAiB,CAAC,QAA9B,EAA2C,GAAA,CAA3C;;UACd,CAAC,CAAC,WAAY,IAAI,GAAJ,CAAA;;AACd,eAAO;MAJD;IAJR,CADF,EANF;;IAiBE,KAAA,CAAM,QAAN,EAAgB,UAAhB;IACA,KAAA,CAAM,QAAN,EAAgB,UAAU,CAAC,MAA3B;AACA,WAAO;EApBQ,EA1BjB;;;EAmDA,MAAM,CAAC,OAAP,GAAiB,CAAE,MAAF,EAAU,cAAV;AAnDjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nGUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'DATAMILL/TYPES'\n{ debug }                 = GUY.trm.get_loggers 'INTERVOKE/TYPES'\n{ rpr\n  inspect\n  echo\n  log     }               = GUY.trm\n{ Intertype }             = require 'intertype'\nbase_types                = null\nmisfit                    = Symbol 'misfit'\n# PATH                      = require 'node:path'\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_base_types = ->\n  return base_types if base_types?\n  #.........................................................................................................\n  base_types                = new Intertype()\n  { declare }               = base_types\n  #.........................................................................................................\n  declare.ivk_registry 'map'\n  declare.word_prompter_cfg\n    fields:\n      registry:     'ivk_registry'\n    template:\n      registry:     null\n    create: ( x ) ->\n      return x if x? and not not @isa.object x\n      R           = { @registry.word_prompter_cfg.template..., x..., }\n      R.registry ?= new Map()\n      return R\n  #.........................................................................................................\n  debug '^4345^', base_types\n  debug '^4345^', base_types.create\n  return base_types\n\n\n\n#===========================================================================================================\nmodule.exports = { misfit, get_base_types, }\n\n\n\n"
  ]
}